apiVersion: v1
kind: Namespace
metadata:
  name: cloudflare-tunnel
  labels:
    name: cloudflare-tunnel
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudflare-tunnel
  namespace: cloudflare-tunnel
  labels:
    app: cloudflare-tunnel
spec:
  replicas: 2  # High availability
  selector:
    matchLabels:
      app: cloudflare-tunnel
  template:
    metadata:
      labels:
        app: cloudflare-tunnel
      annotations:
        # Restart pods when configmap changes
        configmap/checksum: ""  # Will be populated by deployment script
    spec:
      containers:
      - name: cloudflared
        image: cloudflare/cloudflared:2024.1.5
        args:
          - tunnel
          - --config
          - /etc/cloudflared/config/config.yaml
          - run
        livenessProbe:
          httpGet:
            path: /ready
            port: 9090
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /ready
            port: 9090
          failureThreshold: 1
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
        ports:
        - containerPort: 9090
          name: metrics
          protocol: TCP
        volumeMounts:
        - name: config
          mountPath: /etc/cloudflared/config
          readOnly: true
        - name: creds
          mountPath: /etc/cloudflared/creds
          readOnly: true
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 256Mi
        env:
        - name: TUNNEL_TOKEN
          valueFrom:
            secretKeyRef:
              name: cloudflare-tunnel-token
              key: token
        - name: TUNNEL_NAME
          value: "${CLUSTER_NAME}-tunnel"
        - name: CLUSTER_NAME
          value: "${CLUSTER_NAME}"
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65532
          runAsGroup: 65532
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config
        configMap:
          name: cloudflare-tunnel-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: creds
        secret:
          secretName: cloudflare-tunnel-credentials
          optional: true
      # Security and scheduling
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
        runAsGroup: 65532
        fsGroup: 65532
        seccompProfile:
          type: RuntimeDefault
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - cloudflare-tunnel
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule
---
apiVersion: v1
kind: Service
metadata:
  name: cloudflare-tunnel-metrics
  namespace: cloudflare-tunnel
  labels:
    app: cloudflare-tunnel
spec:
  ports:
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app: cloudflare-tunnel
---
# ServiceMonitor for Prometheus monitoring (if available)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: cloudflare-tunnel
  namespace: cloudflare-tunnel
  labels:
    app: cloudflare-tunnel
spec:
  selector:
    matchLabels:
      app: cloudflare-tunnel
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
---
# NetworkPolicy to restrict tunnel pod access
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: cloudflare-tunnel-policy
  namespace: cloudflare-tunnel
spec:
  podSelector:
    matchLabels:
      app: cloudflare-tunnel
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow metrics scraping from monitoring namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow HTTPS to Cloudflare
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # Allow HTTP to gateway service
  - to:
    - namespaceSelector:
        matchLabels:
          name: nginx-gateway
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443